import time
import cv2
import threading
import queue
from screenshot import screenshot
from ultralytics import YOLO
from logic import decide_action_career, decide_action_live, decide_action_ingame
from controller import send_action_career, send_action_live, send_action_ingame

# Load m√¥ h√¨nh
model = YOLO('models/best.pt') 
model_ingame = YOLO('models/best_ingame.pt')  

# C·∫•u h√¨nh webcam ·∫£o
# cap = cv2.VideoCapture(0)
# cap.set(cv2.CAP_PROP_FRAME_WIDTH, 2400)
# cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)

# H√†ng ƒë·ª£i chia s·∫ª h√†nh ƒë·ªông gi·ªØa lu·ªìng detect v√† lu·ªìng send
action_queue = queue.LifoQueue(maxsize=0)
stop_event = threading.Event()

# Bi·∫øn mode ƒë∆∞·ª£c thi·∫øt l·∫≠p ·ªü main_loop
current_mode = None
continue_hold = False

def clear_action_queue():
    try:
        while True:
            action_queue.get_nowait()
    except queue.Empty:
        pass

def detect_thread():
    while not stop_event.is_set():
        mode = current_mode
        # ret, frame = cap.read()
        global continue_hold

        frame = screenshot()  # S·ª≠ d·ª•ng h√†m screenshot ƒë·ªÉ l·∫•y ·∫£nh t·ª´ webcam ·∫£o

        if continue_hold:
            time.sleep(4)
            continue_hold = False
            frame = screenshot()  # S·ª≠ d·ª•ng h√†m screenshot ƒë·ªÉ l·∫•y ·∫£nh t·ª´ webcam ·∫£o


        # if not ret:
        #     continue

        try:
            if mode == '1':  # Career
                results = model(frame, conf=0.4)[0]
                actions = decide_action_career(results)
                visualize_debug(results, frame, "debug_interface.jpg")

                if not actions:
                    results_ingame = model_ingame(frame, conf=0.5)[0]
                    actions = decide_action_ingame(results_ingame)
                    visualize_debug(results_ingame, frame, "debug_ingame.jpg")

                    if not actions:
                        print("[‚ÑπÔ∏è] Kh√¥ng c√≥ h√†nh ƒë·ªông n√†o ƒë∆∞·ª£c x√°c ƒë·ªãnh.")
                        continue

                    # Fallback sang ingame
                    for action in actions:
                        action_queue.put(("0", action))  # d√πng mode "0"
                    continue
                else:
                    for action in actions:
                        action_queue.put(("1", action))

            elif mode == '2':  # Live
                frame = cv2.resize(frame, (2400, 1080))
                results = model(frame, conf=0.4)[0]
                actions = decide_action_live(results)
                # visualize_debug(results, frame, "debug_live.jpg")

                if not actions:
                    results_ingame = model_ingame(frame, conf=0.5)[0]
                    actions = decide_action_ingame(results_ingame)
                    # visualize_debug(results_ingame, frame, "debug_ingame.jpg")

                    if not actions:
                        print("[‚ÑπÔ∏è] Kh√¥ng c√≥ h√†nh ƒë·ªông n√†o ƒë∆∞·ª£c x√°c ƒë·ªãnh.")
                        continue

                    for action in actions:
                        action_queue.put(("0", action))
                    continue
                else:
                    for action in actions:
                        action_queue.put(("2", action))

        except Exception as e:
            print(f"[‚ùå] Detect l·ªói: {e}")

# Thread 2: x·ª≠ l√Ω g·ª≠i h√†nh ƒë·ªông
def action_thread():
    global continue_hold

    while not stop_event.is_set():
        try:
            print("[üöÄ] ƒêang ch·ªù h√†nh ƒë·ªông t·ª´ h√†ng ƒë·ª£i...", action_queue.get())
            mode, (action, x, y) = action_queue.get()
            

            print(f"[üöÄ] G·ª≠i action: {action} v·ªõi t·ªça ƒë·ªô ({x}, {y})")
            if mode == '1':
                send_action_career(action, x, y)
                if(action == "continu"):
                    continue_hold = True
                    clear_action_queue()
                    time.sleep(3)
                    continue
                time.sleep(2)
            elif mode == '2':
                print(f"[üéÆ] H√†nh ƒë·ªông: {action} t·∫°i t·ªça ƒë·ªô ({x}, {y})")
                send_action_live(action, x, y)
                if(action == "continu"):
                    continue_hold = True
                    clear_action_queue()
                    time.sleep(4)
                    continue
                time.sleep(2)
            else:
                send_action_ingame(action, x, y)
                clear_action_queue()
            

        except queue.Empty:
            continue
        except Exception as e:
            print(f"[‚ùå] G·ª≠i action l·ªói: {e}")

# V·∫Ω khung v√† l∆∞u ·∫£nh debug

def visualize_debug(results, frame, file):
    for box in results.boxes:
        cls_id = int(box.cls[0])
        conf = float(box.conf[0])
        label = results.names[cls_id] if hasattr(results, 'names') else str(cls_id)

        xyxy = box.xyxy[0]
        if hasattr(xyxy, 'cpu'):
            xyxy = xyxy.cpu().numpy()
        x1, y1, x2, y2 = map(int, xyxy)

        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, f"{label} {conf:.2f}", (x1, y1 - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)

    cv2.imwrite(file, frame)


# Ch·ªçn ch·∫ø ƒë·ªô ch∆°i

def choose_mode():
    print("[üöÄ] B·∫Øt ƒë·∫ßu AI ƒë√° game DLS...")
    while not stop_event.is_set():
        print("\nCh·ªçn ch·∫ø ƒë·ªô ƒë√°:")
        print("1. Ch∆°i Career")
        print("2. Ch∆°i Live")
        print("Ctrl + c. Tho√°t")

        mode = input("Nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi ch·∫ø ƒë·ªô b·∫°n ch·ªçn (1/2) ho·∫∑c 'Ctrl + c' ƒë·ªÉ tho√°t: ").strip()
        if mode in ['1', '2']:
            print(f"[‚ÑπÔ∏è] Ch·∫ø ƒë·ªô ƒë√£ ch·ªçn: {'Career' if mode == '1' else 'Live'}")
            return mode
        elif mode.lower() == 'q':
            print("[üëã] ƒê√£ tho√°t kh·ªèi ch∆∞∆°ng tr√¨nh.")
            exit()
        else:
            print("[‚ùå] Ch·∫ø ƒë·ªô kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")

# H√†m ch√≠nh kh·ªüi ƒë·ªông lu·ªìng

def main_loop():
    global current_mode
    global continue_hold
    current_mode = choose_mode()

    t1 = threading.Thread(target=detect_thread)
    t2 = threading.Thread(target=action_thread)

    t1.start()
    t2.start()

    try:
        while not stop_event.is_set():
            time.sleep(0.01)
    except KeyboardInterrupt:
        print("\n[üõë] D·ª´ng ch∆∞∆°ng tr√¨nh...")
        stop_event.set()
    finally:
        print("[‚è≥] ƒêang d·ª´ng c√°c ti·∫øn tr√¨nh...")
        t1.join()
        t2.join()
        # cap.release()
        cv2.destroyAllWindows()
        print("[‚úÖ] ƒê√£ d·ª´ng s·∫°ch s·∫Ω.")

if __name__ == "__main__":
    main_loop()